"""
Django settings for user_management project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from __future__ import annotations

import logging.config
import os
from pathlib import Path

import environ
from corsheaders.defaults import default_headers

env = environ.Env()
environ.Env.read_env(env_file='.env')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# Security : Avoiding hardcoded Credentials
# SECRET_KEY = get_random_secret_key()
# SECRET_KEY = get_random_secret_key()
SECRET_KEY = env.str(
    'SECRET_KEY', '6mu60zk7_6m=kf)^01&bzrvq^j&!1te#7n7&g7((o_9c7b$+*5',
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ENABLE_DOCS = env.bool('ENABLE_DOCS', False)

ALLOWED_HOSTS = ['*']


# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    

]

THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
]

LOCAL_APPS = [
    'users',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'sers/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_management.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'video_db',
    },
}


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.getenv('MYSQL_DATABASE'),
#         'USER': os.getenv('MYSQL_USER'),
#         'PASSWORD': os.getenv('MYSQL_PASSWORD'),
#         'HOST': os.getenv('MYSQL_HOST'),
#         'PORT': os.getenv('MYSQL_PORT'),
#     }
# }

# DATABASES = {"default": .env.db(default= "")}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

logging.config.dictConfig(
    {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'console': {'format': '%(name)-12s %(levelname)-8s %(message)s'},
            'file': {'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'},
        },
        'handlers': {
            'console': {'class': 'logging.StreamHandler', 'formatter': 'console'},
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'formatter': 'file',
                'filename': 'debug.log',
            },
        },
        'loggers': {'': {'level': 'DEBUG', 'handlers': ['console', 'file']}},
    },
)

logger = logging.getLogger(__name__)


# Auth configs
AUTH_USER_MODEL = 'users.APIUser'
DEFAULT_PASSWORD = 'passw0rd'

# CORS configurations
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = list(default_headers)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


STATIC_URL = '/api/static/'
MEDIA_URL = '/api/user_data/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'user_data')

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUDIO_FORMAT = {'audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/ogg'}
IMAGE_FORMAT = {'image/jpeg', 'image/png'}
UPLOAD_AUDIO_DIR = 'uploadaudio'
RECOGNISE_AUDIO_DIR = 'recogniseaudio'
NEWS_DIR = 'newsdata'
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}


SWAGGER_SETTINGS = {
    'exclude_namespaces': [],  # List URL namespaces to ignore
    'api_version': '0.1',  # Specify your API's version
    # "api_path": "/",  # Specify the path to your API not a root level
    'enabled_methods': [  # Specify which methods to enable in Swagger UI
        'get',
        'post',
        'put',
        'patch',
        'delete',
    ],
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'X-CSRFToken',
        },
    },
    'api_key': 'X-CSRFToken',  # An API key
    'is_authenticated': False,  # Set to True to enforce user authentication,
    'is_superuser': False,  # Set to True to enforce admin only access
}
